/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { Data, DataInterface } from "../../../contracts/utils/Data";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pairAddress",
        type: "address",
      },
    ],
    name: "addPair",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "addToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
      {
        internalType: "address",
        name: "validator",
        type: "address",
      },
    ],
    name: "addValidatorArr",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
    ],
    name: "addValidatorPoolArr",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "allPairs",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "allPairsLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "allTokens",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "blockTimeStamp",
        type: "uint32",
      },
    ],
    name: "blockNumbers",
    outputs: [
      {
        internalType: "uint32",
        name: "blockNumber",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllPairAddress",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllPools",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "pairAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "token0Uri",
            type: "string",
          },
          {
            internalType: "string",
            name: "token1Uri",
            type: "string",
          },
          {
            internalType: "string",
            name: "token0Symbol",
            type: "string",
          },
          {
            internalType: "string",
            name: "token1Symbol",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "tvl",
            type: "uint256",
          },
        ],
        internalType: "struct Data.PoolDetail[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllTokenAddress",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllTokens",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "symbol",
            type: "string",
          },
          {
            internalType: "string",
            name: "uri",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "tvl",
            type: "uint256",
          },
        ],
        internalType: "struct Data.TokenDetail[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "timeStampNow",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "timeStampBefore",
        type: "uint32",
      },
    ],
    name: "getBlockNumber",
    outputs: [
      {
        internalType: "uint32[]",
        name: "",
        type: "uint32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pairAddress",
        type: "address",
      },
    ],
    name: "getEachPool",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "pairAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "token0Uri",
            type: "string",
          },
          {
            internalType: "string",
            name: "token1Uri",
            type: "string",
          },
          {
            internalType: "string",
            name: "token0Symbol",
            type: "string",
          },
          {
            internalType: "string",
            name: "token1Symbol",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "tvl",
            type: "uint256",
          },
        ],
        internalType: "struct Data.PoolDetail",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "getEachToken",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "symbol",
            type: "string",
          },
          {
            internalType: "string",
            name: "uri",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "tvl",
            type: "uint256",
          },
        ],
        internalType: "struct Data.TokenDetail",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "validator",
        type: "address",
      },
      {
        internalType: "address",
        name: "pairAddress",
        type: "address",
      },
    ],
    name: "getUnclaimedFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pairAddress",
        type: "address",
      },
    ],
    name: "getUnclaimedFee",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "token0FeeAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "token1FeeAmount",
            type: "uint256",
          },
        ],
        internalType: "struct Data.UnclaimedFeeData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pairAddress",
        type: "address",
      },
    ],
    name: "getUserPoolDetail",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "pairAddress",
                type: "address",
              },
              {
                internalType: "string",
                name: "token0Uri",
                type: "string",
              },
              {
                internalType: "string",
                name: "token1Uri",
                type: "string",
              },
              {
                internalType: "string",
                name: "token0Symbol",
                type: "string",
              },
              {
                internalType: "string",
                name: "token1Symbol",
                type: "string",
              },
              {
                internalType: "uint256",
                name: "tvl",
                type: "uint256",
              },
            ],
            internalType: "struct Data.PoolDetail",
            name: "pooldetail",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "token0Amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "token1Amount",
            type: "uint256",
          },
        ],
        internalType: "struct Data.MyPoolDetail",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getUserPools",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "pairAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "token0Uri",
            type: "string",
          },
          {
            internalType: "string",
            name: "token1Uri",
            type: "string",
          },
          {
            internalType: "string",
            name: "token0Symbol",
            type: "string",
          },
          {
            internalType: "string",
            name: "token1Symbol",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "tvl",
            type: "uint256",
          },
        ],
        internalType: "struct Data.PoolDetail[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
    ],
    name: "getValidatorArr",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "getValidatorPoolArr",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "validator",
        type: "address",
      },
      {
        internalType: "address",
        name: "pairAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
    ],
    name: "setUnclaimedFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
      {
        internalType: "address",
        name: "validator",
        type: "address",
      },
    ],
    name: "subValidatorArr",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
    ],
    name: "subValidatorPoolArr",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "validator",
        type: "address",
      },
      {
        internalType: "address",
        name: "pairAddress",
        type: "address",
      },
    ],
    name: "userUnclaimedFee",
    outputs: [
      {
        internalType: "uint256",
        name: "token0FeeAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "token1FeeAmount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pairAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "validatorArr",
    outputs: [
      {
        internalType: "address",
        name: "validator",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "validator",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "validatorPoolArr",
    outputs: [
      {
        internalType: "address",
        name: "pairAddress",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "validator",
        type: "address",
      },
    ],
    name: "validatorPoolArrLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50613219806100206000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80636c2a6986116100f9578063d1d12e2e11610097578063ddc5977b11610071578063ddc5977b14610579578063eae6705a146105a9578063eb201d99146105d9578063fab1d049146105f5576101c4565b8063d1d12e2e1461050f578063d48bfca71461053f578063d88ff1f41461055b576101c4565b8063aa34735b116100d3578063aa34735b14610489578063bdd6be07146104b9578063c2b7bbb6146104d5578063d05b8753146104f1576101c4565b80636c2a6986146103f957806389a3faca146104295780639f34dc2e14610459576101c4565b80632a5c792a116101665780633ba19617116101405780633ba196171461034a5780634ae03b001461037b578063574f2ba3146103ab578063634282af146103c9576101c4565b80632a5c792a146102e0578063369dadff146102fe5780633884415a1461031a576101c4565b80631e3dd18b116101a25780631e3dd18b14610231578063238c45eb1461026157806326f1024f14610292578063295cc8c9146102b0576101c4565b80630202787b146101c95780630cd8eb62146101e557806314bb03d014610201575b600080fd5b6101e360048036038101906101de919061231a565b610613565b005b6101ff60048036038101906101fa919061231a565b610914565b005b61021b6004803603810190610216919061235a565b6109b8565b60405161022891906124c3565b60405180910390f35b61024b60048036038101906102469190612511565b610d87565b604051610258919061254d565b60405180910390f35b61027b6004803603810190610276919061231a565b610dc6565b604051610289929190612577565b60405180910390f35b61029a610ed4565b6040516102a79190612700565b60405180910390f35b6102ca60048036038101906102c5919061235a565b611060565b6040516102d791906127c0565b60405180910390f35b6102e8611406565b6040516102f59190612928565b60405180910390f35b6103186004803603810190610313919061231a565b6114f5565b005b610334600480360381019061032f919061294a565b6117f6565b604051610341919061254d565b60405180910390f35b610364600480360381019061035f919061231a565b611844565b604051610372929190612577565b60405180910390f35b6103956004803603810190610390919061235a565b611875565b6040516103a29190612a39565b60405180910390f35b6103b3611942565b6040516103c09190612a5b565b60405180910390f35b6103e360048036038101906103de9190612511565b61194e565b6040516103f0919061254d565b60405180910390f35b610413600480360381019061040e919061294a565b61198d565b604051610420919061254d565b60405180910390f35b610443600480360381019061043e9190612ab2565b6119db565b6040516104509190612aee565b60405180910390f35b610473600480360381019061046e9190612b09565b6119fe565b6040516104809190612c07565b60405180910390f35b6104a3600480360381019061049e919061235a565b611b37565b6040516104b09190612a5b565b60405180910390f35b6104d360048036038101906104ce9190612c29565b611b83565b005b6104ef60048036038101906104ea919061235a565b611c31565b005b6104f9611c97565b6040516105069190612a39565b60405180910390f35b6105296004803603810190610524919061235a565b611d25565b6040516105369190612ce0565b60405180910390f35b6105596004803603810190610554919061235a565b611dd9565b005b610563611e3f565b6040516105709190612700565b60405180910390f35b610593600480360381019061058e919061235a565b611f2d565b6040516105a09190612a39565b60405180910390f35b6105c360048036038101906105be919061235a565b611ffa565b6040516105d09190612d31565b60405180910390f35b6105f360048036038101906105ee919061231a565b6120a4565b005b6105fd612148565b60405161060a9190612a39565b60405180910390f35b60006001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506106649190612d7b565b905060005b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905081101561088a578273ffffffffffffffffffffffffffffffffffffffff16600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061071b5761071a612daf565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361087757600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106107b2576107b1612daf565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061082e5761082d612daf565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b808061088290612dde565b915050610669565b50600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806108da576108d9612e26565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6109c06121d6565b60008290506000805b600080549050811015610be757600080600083815481106109ed576109ec612daf565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610a62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a869190612eb0565b50915091506000808481548110610aa057610a9f612daf565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b399190612f18565b73ffffffffffffffffffffffffffffffffffffffff1660008581548110610b6357610b62612daf565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610baf5781610bb1565b825b6dffffffffffffffffffffffffffff1690508085610bcf9190612f45565b94505050508080610bdf90612dde565b9150506109c9565b506040518060a001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610c5a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610c83919061309f565b81526020018373ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610cd3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610cfc919061309f565b81526020018373ffffffffffffffffffffffffffffffffffffffff1663eac989f86040518163ffffffff1660e01b8152600401600060405180830381865afa158015610d4c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d75919061309f565b81526020018281525092505050919050565b60008181548110610d9757600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154915091509250929050565b60606000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610f9757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610f4d575b505050505090506000815167ffffffffffffffff811115610fbb57610fba612f83565b5b604051908082528060200260200182016040528015610ff457816020015b610fe161221b565b815260200190600190039081610fd95790505b50905060005b82518110156110575761102683828151811061101957611018612daf565b5b6020026020010151611060565b82828151811061103957611038612daf565b5b6020026020010181905250808061104f90612dde565b915050610ffa565b50809250505090565b61106861221b565b600082905060008173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110de9190612f18565b905060008273ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561112d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111519190612f18565b90506000808473ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156111a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c59190612eb0565b5091509150600081836111d891906130e8565b6dffffffffffffffffffffffffffff1690506040518060c001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1663eac989f86040518163ffffffff1660e01b8152600401600060405180830381865afa15801561125c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611285919061309f565b81526020018573ffffffffffffffffffffffffffffffffffffffff1663eac989f86040518163ffffffff1660e01b8152600401600060405180830381865afa1580156112d5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906112fe919061309f565b81526020018673ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561134e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611377919061309f565b81526020018573ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156113c7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906113f0919061309f565b8152602001828152509650505050505050919050565b6060600060018054905067ffffffffffffffff81111561142957611428612f83565b5b60405190808252806020026020018201604052801561146257816020015b61144f6121d6565b8152602001906001900390816114475790505b50905060005b6001805490508110156114ed576114bc6001828154811061148c5761148b612daf565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166109b8565b8282815181106114cf576114ce612daf565b5b602002602001018190525080806114e590612dde565b915050611468565b508091505090565b60006001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506115469190612d7b565b905060005b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905081101561176c578273ffffffffffffffffffffffffffffffffffffffff16600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106115fd576115fc612daf565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361175957600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061169457611693612daf565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106117105761170f612daf565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b808061176490612dde565b91505061154b565b50600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806117bc576117bb612e26565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b6004602052816000526040600020818154811061181257600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6005602052816000526040600020602052806000526040600020600091509150508060000154908060010154905082565b6060600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561193657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116118ec575b50505050509050919050565b60008080549050905090565b6001818154811061195e57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260205281600052604060002081815481106119a957600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915054906101000a900463ffffffff1681565b606060008284611a0e919061312a565b63ffffffff1667ffffffffffffffff811115611a2d57611a2c612f83565b5b604051908082528060200260200182016040528015611a5b5781602001602082028036833780820191505090505b50905060008390505b8463ffffffff168163ffffffff161015611b2c576000600360008363ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900463ffffffff1663ffffffff1614611b1957600360008263ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900463ffffffff16828263ffffffff1681518110611afe57611afd612daf565b5b602002602001019063ffffffff16908163ffffffff16815250505b8080611b2490613162565b915050611a64565b508091505092915050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b604051806040016040528083815260200182815250600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015590505050505050565b6000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000805480602002602001604051908101604052809291908181526020018280548015611d1b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611cd1575b5050505050905090565b611d2d612267565b6000808373ffffffffffffffffffffffffffffffffffffffff1663dbbdd935336040518263ffffffff1660e01b8152600401611d69919061254d565b6040805180830381865afa158015611d85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da991906131a3565b915091506040518060600160405280611dc186611060565b81526020018381526020018281525092505050919050565b6001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808054905067ffffffffffffffff811115611e6157611e60612f83565b5b604051908082528060200260200182016040528015611e9a57816020015b611e8761221b565b815260200190600190039081611e7f5790505b50905060005b600080549050811015611f2557611ef460008281548110611ec457611ec3612daf565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611060565b828281518110611f0757611f06612daf565b5b60200260200101819052508080611f1d90612dde565b915050611ea0565b508091505090565b6060600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611fee57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611fa4575b50505050509050919050565b61200261228e565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050919050565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b606060018054806020026020016040519081016040528092919081815260200182805480156121cc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612182575b5050505050905090565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160608152602001600081525090565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020016060815260200160608152602001600081525090565b604051806060016040528061227a61221b565b815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006122e7826122bc565b9050919050565b6122f7816122dc565b811461230257600080fd5b50565b600081359050612314816122ee565b92915050565b60008060408385031215612331576123306122b2565b5b600061233f85828601612305565b925050602061235085828601612305565b9150509250929050565b6000602082840312156123705761236f6122b2565b5b600061237e84828501612305565b91505092915050565b612390816122dc565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156123d05780820151818401526020810190506123b5565b60008484015250505050565b6000601f19601f8301169050919050565b60006123f882612396565b61240281856123a1565b93506124128185602086016123b2565b61241b816123dc565b840191505092915050565b6000819050919050565b61243981612426565b82525050565b600060a0830160008301516124576000860182612387565b506020830151848203602086015261246f82826123ed565b9150506040830151848203604086015261248982826123ed565b915050606083015184820360608601526124a382826123ed565b91505060808301516124b86080860182612430565b508091505092915050565b600060208201905081810360008301526124dd818461243f565b905092915050565b6124ee81612426565b81146124f957600080fd5b50565b60008135905061250b816124e5565b92915050565b600060208284031215612527576125266122b2565b5b6000612535848285016124fc565b91505092915050565b612547816122dc565b82525050565b6000602082019050612562600083018461253e565b92915050565b61257181612426565b82525050565b600060408201905061258c6000830185612568565b6125996020830184612568565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060c0830160008301516125e46000860182612387565b50602083015184820360208601526125fc82826123ed565b9150506040830151848203604086015261261682826123ed565b9150506060830151848203606086015261263082826123ed565b9150506080830151848203608086015261264a82826123ed565b91505060a083015161265f60a0860182612430565b508091505092915050565b600061267683836125cc565b905092915050565b6000602082019050919050565b6000612696826125a0565b6126a081856125ab565b9350836020820285016126b2856125bc565b8060005b858110156126ee57848403895281516126cf858261266a565b94506126da8361267e565b925060208a019950506001810190506126b6565b50829750879550505050505092915050565b6000602082019050818103600083015261271a818461268b565b905092915050565b600060c08301600083015161273a6000860182612387565b506020830151848203602086015261275282826123ed565b9150506040830151848203604086015261276c82826123ed565b9150506060830151848203606086015261278682826123ed565b915050608083015184820360808601526127a082826123ed565b91505060a08301516127b560a0860182612430565b508091505092915050565b600060208201905081810360008301526127da8184612722565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060a0830160008301516128266000860182612387565b506020830151848203602086015261283e82826123ed565b9150506040830151848203604086015261285882826123ed565b9150506060830151848203606086015261287282826123ed565b91505060808301516128876080860182612430565b508091505092915050565b600061289e838361280e565b905092915050565b6000602082019050919050565b60006128be826127e2565b6128c881856127ed565b9350836020820285016128da856127fe565b8060005b8581101561291657848403895281516128f78582612892565b9450612902836128a6565b925060208a019950506001810190506128de565b50829750879550505050505092915050565b6000602082019050818103600083015261294281846128b3565b905092915050565b60008060408385031215612961576129606122b2565b5b600061296f85828601612305565b9250506020612980858286016124fc565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006129c28383612387565b60208301905092915050565b6000602082019050919050565b60006129e68261298a565b6129f08185612995565b93506129fb836129a6565b8060005b83811015612a2c578151612a1388826129b6565b9750612a1e836129ce565b9250506001810190506129ff565b5085935050505092915050565b60006020820190508181036000830152612a5381846129db565b905092915050565b6000602082019050612a706000830184612568565b92915050565b600063ffffffff82169050919050565b612a8f81612a76565b8114612a9a57600080fd5b50565b600081359050612aac81612a86565b92915050565b600060208284031215612ac857612ac76122b2565b5b6000612ad684828501612a9d565b91505092915050565b612ae881612a76565b82525050565b6000602082019050612b036000830184612adf565b92915050565b60008060408385031215612b2057612b1f6122b2565b5b6000612b2e85828601612a9d565b9250506020612b3f85828601612a9d565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612b7e81612a76565b82525050565b6000612b908383612b75565b60208301905092915050565b6000602082019050919050565b6000612bb482612b49565b612bbe8185612b54565b9350612bc983612b65565b8060005b83811015612bfa578151612be18882612b84565b9750612bec83612b9c565b925050600181019050612bcd565b5085935050505092915050565b60006020820190508181036000830152612c218184612ba9565b905092915050565b60008060008060808587031215612c4357612c426122b2565b5b6000612c5187828801612305565b9450506020612c6287828801612305565b9350506040612c73878288016124fc565b9250506060612c84878288016124fc565b91505092959194509250565b60006060830160008301518482036000860152612cad82826125cc565b9150506020830151612cc26020860182612430565b506040830151612cd56040860182612430565b508091505092915050565b60006020820190508181036000830152612cfa8184612c90565b905092915050565b604082016000820151612d186000850182612430565b506020820151612d2b6020850182612430565b50505050565b6000604082019050612d466000830184612d02565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612d8682612426565b9150612d9183612426565b9250828203905081811115612da957612da8612d4c565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612de982612426565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612e1b57612e1a612d4c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60006dffffffffffffffffffffffffffff82169050919050565b612e7881612e55565b8114612e8357600080fd5b50565b600081519050612e9581612e6f565b92915050565b600081519050612eaa81612a86565b92915050565b600080600060608486031215612ec957612ec86122b2565b5b6000612ed786828701612e86565b9350506020612ee886828701612e86565b9250506040612ef986828701612e9b565b9150509250925092565b600081519050612f12816122ee565b92915050565b600060208284031215612f2e57612f2d6122b2565b5b6000612f3c84828501612f03565b91505092915050565b6000612f5082612426565b9150612f5b83612426565b9250828201905080821115612f7357612f72612d4c565b5b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612fbb826123dc565b810181811067ffffffffffffffff82111715612fda57612fd9612f83565b5b80604052505050565b6000612fed6122a8565b9050612ff98282612fb2565b919050565b600067ffffffffffffffff82111561301957613018612f83565b5b613022826123dc565b9050602081019050919050565b600061304261303d84612ffe565b612fe3565b90508281526020810184848401111561305e5761305d612f7e565b5b6130698482856123b2565b509392505050565b600082601f83011261308657613085612f79565b5b815161309684826020860161302f565b91505092915050565b6000602082840312156130b5576130b46122b2565b5b600082015167ffffffffffffffff8111156130d3576130d26122b7565b5b6130df84828501613071565b91505092915050565b60006130f382612e55565b91506130fe83612e55565b925082820190506dffffffffffffffffffffffffffff81111561312457613123612d4c565b5b92915050565b600061313582612a76565b915061314083612a76565b9250828203905063ffffffff81111561315c5761315b612d4c565b5b92915050565b600061316d82612a76565b915063ffffffff820361318357613182612d4c565b5b600182019050919050565b60008151905061319d816124e5565b92915050565b600080604083850312156131ba576131b96122b2565b5b60006131c88582860161318e565b92505060206131d98582860161318e565b915050925092905056fea264697066735822122051575ebc2ca364f282497241e3d8dd4dfefb7be257bd602c0150bfae01527d5964736f6c63430008140033";

type DataConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DataConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Data__factory extends ContractFactory {
  constructor(...args: DataConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Data & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Data__factory {
    return super.connect(runner) as Data__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DataInterface {
    return new Interface(_abi) as DataInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Data {
    return new Contract(address, _abi, runner) as unknown as Data;
  }
}
