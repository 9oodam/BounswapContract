/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { Data, DataInterface } from "../../../contracts/utils/Data";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pairAddress",
        type: "address",
      },
    ],
    name: "addPair",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "addToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
      {
        internalType: "address",
        name: "validator",
        type: "address",
      },
    ],
    name: "addValidatorArr",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
    ],
    name: "addValidatorPoolArr",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "allPairs",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "allPairsLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "allTokens",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "blockTimeStamp",
        type: "uint32",
      },
    ],
    name: "blockNumbers",
    outputs: [
      {
        internalType: "uint32",
        name: "blockNumber",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllPairAddress",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllPools",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "pairAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "token0Uri",
            type: "string",
          },
          {
            internalType: "string",
            name: "token1Uri",
            type: "string",
          },
          {
            internalType: "string",
            name: "token0Symbol",
            type: "string",
          },
          {
            internalType: "string",
            name: "token1Symbol",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "tvl",
            type: "uint256",
          },
        ],
        internalType: "struct Data.PoolDetail[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllTokenAddress",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllTokens",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "symbol",
            type: "string",
          },
          {
            internalType: "string",
            name: "uri",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "tvl",
            type: "uint256",
          },
        ],
        internalType: "struct Data.TokenDetail[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "timeStampNow",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "timeStampBefore",
        type: "uint32",
      },
    ],
    name: "getBlockNumber",
    outputs: [
      {
        internalType: "uint32[]",
        name: "",
        type: "uint32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pairAddress",
        type: "address",
      },
    ],
    name: "getEachPool",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "pairAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "token0Uri",
            type: "string",
          },
          {
            internalType: "string",
            name: "token1Uri",
            type: "string",
          },
          {
            internalType: "string",
            name: "token0Symbol",
            type: "string",
          },
          {
            internalType: "string",
            name: "token1Symbol",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "tvl",
            type: "uint256",
          },
        ],
        internalType: "struct Data.PoolDetail",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "getEachToken",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "symbol",
            type: "string",
          },
          {
            internalType: "string",
            name: "uri",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "tvl",
            type: "uint256",
          },
        ],
        internalType: "struct Data.TokenDetail",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "validator",
        type: "address",
      },
      {
        internalType: "address",
        name: "pairAddress",
        type: "address",
      },
    ],
    name: "getUnclaimedFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pairAddress",
        type: "address",
      },
    ],
    name: "getUnclaimedFee",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "token0FeeAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "token1FeeAmount",
            type: "uint256",
          },
        ],
        internalType: "struct Data.UnclaimedFeeData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pairAddress",
        type: "address",
      },
    ],
    name: "getUserPoolDetail",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "pairAddress",
                type: "address",
              },
              {
                internalType: "string",
                name: "token0Uri",
                type: "string",
              },
              {
                internalType: "string",
                name: "token1Uri",
                type: "string",
              },
              {
                internalType: "string",
                name: "token0Symbol",
                type: "string",
              },
              {
                internalType: "string",
                name: "token1Symbol",
                type: "string",
              },
              {
                internalType: "uint256",
                name: "tvl",
                type: "uint256",
              },
            ],
            internalType: "struct Data.PoolDetail",
            name: "pooldetail",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "token0Amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "token1Amount",
            type: "uint256",
          },
        ],
        internalType: "struct Data.MyPoolDetail",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getUserPools",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "pairAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "token0Uri",
            type: "string",
          },
          {
            internalType: "string",
            name: "token1Uri",
            type: "string",
          },
          {
            internalType: "string",
            name: "token0Symbol",
            type: "string",
          },
          {
            internalType: "string",
            name: "token1Symbol",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "tvl",
            type: "uint256",
          },
        ],
        internalType: "struct Data.PoolDetail[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
    ],
    name: "getValidatorArr",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "getValidatorPoolArr",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "validator",
        type: "address",
      },
      {
        internalType: "address",
        name: "pairAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
    ],
    name: "setUnclaimedFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
      {
        internalType: "address",
        name: "validator",
        type: "address",
      },
    ],
    name: "subValidatorArr",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
    ],
    name: "subValidatorPoolArr",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "validator",
        type: "address",
      },
      {
        internalType: "address",
        name: "pairAddress",
        type: "address",
      },
    ],
    name: "userUnclaimedFee",
    outputs: [
      {
        internalType: "uint256",
        name: "token0FeeAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "token1FeeAmount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pairAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "validatorArr",
    outputs: [
      {
        internalType: "address",
        name: "validator",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "validator",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "validatorPoolArr",
    outputs: [
      {
        internalType: "address",
        name: "pairAddress",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "validator",
        type: "address",
      },
    ],
    name: "validatorPoolArrLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "";

type DataConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DataConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Data__factory extends ContractFactory {
  constructor(...args: DataConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Data & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Data__factory {
    return super.connect(runner) as Data__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DataInterface {
    return new Interface(_abi) as DataInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Data {
    return new Contract(address, _abi, runner) as unknown as Data;
  }
}
