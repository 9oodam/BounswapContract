/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { WBNC, WBNCInterface } from "../../../contracts/contract/WBNC";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "string",
        name: "_uri",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawal",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "_burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "_mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_imageUri",
        type: "string",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "uri",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052601260035534801562000015575f80fd5b5060405162001b6c38038062001b6c83398181016040528101906200003b919062000315565b82825f83835f90816200004f919062000602565b50826001908162000061919062000602565b506200007381620000c060201b60201c565b6002908162000083919062000602565b50620000b333600354600a6200009a919062000863565b84620000a79190620008b3565b620000fc60201b60201c565b505050505050506200099e565b6060620000d26200016f60201b60201c565b82604051602001620000e69291906200093d565b6040516020818303038152906040529050919050565b8060055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546200014a919062000964565b925050819055508060045f82825462000164919062000964565b925050819055505050565b606060405180606001604052806035815260200162001b3760359139905090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b620001f182620001a9565b810181811067ffffffffffffffff82111715620002135762000212620001b9565b5b80604052505050565b5f6200022762000190565b9050620002358282620001e6565b919050565b5f67ffffffffffffffff821115620002575762000256620001b9565b5b6200026282620001a9565b9050602081019050919050565b5f5b838110156200028e57808201518184015260208101905062000271565b5f8484015250505050565b5f620002af620002a9846200023a565b6200021c565b905082815260208101848484011115620002ce57620002cd620001a5565b5b620002db8482856200026f565b509392505050565b5f82601f830112620002fa57620002f9620001a1565b5b81516200030c84826020860162000299565b91505092915050565b5f805f606084860312156200032f576200032e62000199565b5b5f84015167ffffffffffffffff8111156200034f576200034e6200019d565b5b6200035d86828701620002e3565b935050602084015167ffffffffffffffff8111156200038157620003806200019d565b5b6200038f86828701620002e3565b925050604084015167ffffffffffffffff811115620003b357620003b26200019d565b5b620003c186828701620002e3565b9150509250925092565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200041a57607f821691505b60208210810362000430576200042f620003d5565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620004947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000457565b620004a0868362000457565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f620004ea620004e4620004de84620004b8565b620004c1565b620004b8565b9050919050565b5f819050919050565b6200050583620004ca565b6200051d6200051482620004f1565b84845462000463565b825550505050565b5f90565b6200053362000525565b62000540818484620004fa565b505050565b5b8181101562000567576200055b5f8262000529565b60018101905062000546565b5050565b601f821115620005b657620005808162000436565b6200058b8462000448565b810160208510156200059b578190505b620005b3620005aa8562000448565b83018262000545565b50505b505050565b5f82821c905092915050565b5f620005d85f1984600802620005bb565b1980831691505092915050565b5f620005f28383620005c7565b9150826002028217905092915050565b6200060d82620003cb565b67ffffffffffffffff811115620006295762000628620001b9565b5b62000635825462000402565b620006428282856200056b565b5f60209050601f83116001811462000678575f841562000663578287015190505b6200066f8582620005e5565b865550620006de565b601f198416620006888662000436565b5f5b82811015620006b1578489015182556001820191506020850194506020810190506200068a565b86831015620006d15784890151620006cd601f891682620005c7565b8355505b6001600288020188555050505b505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f8160011c9050919050565b5f808291508390505b60018511156200077057808604811115620007485762000747620006e6565b5b6001851615620007585780820291505b8081029050620007688562000713565b945062000728565b94509492505050565b5f826200078a57600190506200085c565b8162000799575f90506200085c565b8160018114620007b25760028114620007bd57620007f3565b60019150506200085c565b60ff841115620007d257620007d1620006e6565b5b8360020a915084821115620007ec57620007eb620006e6565b5b506200085c565b5060208310610133831016604e8410600b84101617156200082d5782820a905083811115620008275762000826620006e6565b5b6200085c565b6200083c84848460016200071f565b92509050818404811115620008565762000855620006e6565b5b81810290505b9392505050565b5f6200086f82620004b8565b91506200087c83620004b8565b9250620008ab7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848462000779565b905092915050565b5f620008bf82620004b8565b9150620008cc83620004b8565b9250828202620008dc81620004b8565b91508282048414831517620008f657620008f5620006e6565b5b5092915050565b5f81905092915050565b5f6200091382620003cb565b6200091f8185620008fd565b9350620009318185602086016200026f565b80840191505092915050565b5f6200094a828562000907565b915062000958828462000907565b91508190509392505050565b5f6200097082620004b8565b91506200097d83620004b8565b9250828201905080821115620009985762000997620006e6565b5b92915050565b61118b80620009ac5f395ff3fe6080604052600436106100f2575f3560e01c806355b6ed5c11610089578063a9059cbb11610058578063a9059cbb14610354578063b6b55f2514610390578063dd62ed3e146103ac578063eac989f8146103e8576100f2565b806355b6ed5c1461028a5780636161eb18146102c657806370a08231146102ee57806395d89b411461032a576100f2565b806327e235e3116100c557806327e235e3146101c25780632e1a7d4d146101fe5780634cf12d26146102265780634e6ec24714610262576100f2565b806306fdde03146100f6578063095ea7b31461012057806318160ddd1461015c57806323b872dd14610186575b5f80fd5b348015610101575f80fd5b5061010a610412565b6040516101179190610c25565b60405180910390f35b34801561012b575f80fd5b5061014660048036038101906101419190610ce3565b61049d565b6040516101539190610d3b565b60405180910390f35b348015610167575f80fd5b50610170610525565b60405161017d9190610d63565b60405180910390f35b348015610191575f80fd5b506101ac60048036038101906101a79190610d7c565b61052b565b6040516101b99190610d3b565b60405180910390f35b3480156101cd575f80fd5b506101e860048036038101906101e39190610dcc565b6106ef565b6040516101f59190610d63565b60405180910390f35b348015610209575f80fd5b50610224600480360381019061021f9190610df7565b610704565b005b348015610231575f80fd5b5061024c60048036038101906102479190610f4e565b61075f565b6040516102599190610c25565b60405180910390f35b34801561026d575f80fd5b5061028860048036038101906102839190610ce3565b610791565b005b348015610295575f80fd5b506102b060048036038101906102ab9190610f95565b610800565b6040516102bd9190610d63565b60405180910390f35b3480156102d1575f80fd5b506102ec60048036038101906102e79190610ce3565b610820565b005b3480156102f9575f80fd5b50610314600480360381019061030f9190610dcc565b61088f565b6040516103219190610d63565b60405180910390f35b348015610335575f80fd5b5061033e6108d5565b60405161034b9190610c25565b60405180910390f35b34801561035f575f80fd5b5061037a60048036038101906103759190610ce3565b610961565b6040516103879190610d3b565b60405180910390f35b6103aa60048036038101906103a59190610df7565b610a12565b005b3480156103b7575f80fd5b506103d260048036038101906103cd9190610f95565b610a6d565b6040516103df9190610d63565b60405180910390f35b3480156103f3575f80fd5b506103fc610aef565b6040516104099190610c25565b60405180910390f35b5f805461041e90611000565b80601f016020809104026020016040519081016040528092919081815260200182805461044a90611000565b80156104955780601f1061046c57610100808354040283529160200191610495565b820191905f5260205f20905b81548152906001019060200180831161047857829003601f168201915b505050505081565b5f8160065f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055506001905092915050565b60045481565b5f8160065f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205410156105b0575f80fd5b8160065f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610637919061105d565b925050819055508160055f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825461068a919061105d565b925050819055508160055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546106dd9190611090565b92505081905550600190509392505050565b6005602052805f5260405f205f915090505481565b61070e3382610820565b3373ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65826040516107549190610d63565b60405180910390a250565b6060610769610b7b565b8260405160200161077b9291906110fd565b6040516020818303038152906040529050919050565b8060055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546107dd9190611090565b925050819055508060045f8282546107f59190611090565b925050819055505050565b6006602052815f5260405f20602052805f5260405f205f91509150505481565b8060055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825461086c919061105d565b925050819055508060045f828254610884919061105d565b925050819055505050565b5f60055f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b600180546108e290611000565b80601f016020809104026020016040519081016040528092919081815260200182805461090e90611000565b80156109595780601f1061093057610100808354040283529160200191610959565b820191905f5260205f20905b81548152906001019060200180831161093c57829003601f168201915b505050505081565b5f8160055f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546109ae919061105d565b925050819055508160055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610a019190611090565b925050819055506001905092915050565b610a1c3382610791565b3373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c82604051610a629190610d63565b60405180910390a250565b5f60065f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b60028054610afc90611000565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2890611000565b8015610b735780601f10610b4a57610100808354040283529160200191610b73565b820191905f5260205f20905b815481529060010190602001808311610b5657829003601f168201915b505050505081565b606060405180606001604052806035815260200161112160359139905090565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610bd2578082015181840152602081019050610bb7565b5f8484015250505050565b5f601f19601f8301169050919050565b5f610bf782610b9b565b610c018185610ba5565b9350610c11818560208601610bb5565b610c1a81610bdd565b840191505092915050565b5f6020820190508181035f830152610c3d8184610bed565b905092915050565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610c7f82610c56565b9050919050565b610c8f81610c75565b8114610c99575f80fd5b50565b5f81359050610caa81610c86565b92915050565b5f819050919050565b610cc281610cb0565b8114610ccc575f80fd5b50565b5f81359050610cdd81610cb9565b92915050565b5f8060408385031215610cf957610cf8610c4e565b5b5f610d0685828601610c9c565b9250506020610d1785828601610ccf565b9150509250929050565b5f8115159050919050565b610d3581610d21565b82525050565b5f602082019050610d4e5f830184610d2c565b92915050565b610d5d81610cb0565b82525050565b5f602082019050610d765f830184610d54565b92915050565b5f805f60608486031215610d9357610d92610c4e565b5b5f610da086828701610c9c565b9350506020610db186828701610c9c565b9250506040610dc286828701610ccf565b9150509250925092565b5f60208284031215610de157610de0610c4e565b5b5f610dee84828501610c9c565b91505092915050565b5f60208284031215610e0c57610e0b610c4e565b5b5f610e1984828501610ccf565b91505092915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610e6082610bdd565b810181811067ffffffffffffffff82111715610e7f57610e7e610e2a565b5b80604052505050565b5f610e91610c45565b9050610e9d8282610e57565b919050565b5f67ffffffffffffffff821115610ebc57610ebb610e2a565b5b610ec582610bdd565b9050602081019050919050565b828183375f83830152505050565b5f610ef2610eed84610ea2565b610e88565b905082815260208101848484011115610f0e57610f0d610e26565b5b610f19848285610ed2565b509392505050565b5f82601f830112610f3557610f34610e22565b5b8135610f45848260208601610ee0565b91505092915050565b5f60208284031215610f6357610f62610c4e565b5b5f82013567ffffffffffffffff811115610f8057610f7f610c52565b5b610f8c84828501610f21565b91505092915050565b5f8060408385031215610fab57610faa610c4e565b5b5f610fb885828601610c9c565b9250506020610fc985828601610c9c565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061101757607f821691505b60208210810361102a57611029610fd3565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61106782610cb0565b915061107283610cb0565b925082820390508181111561108a57611089611030565b5b92915050565b5f61109a82610cb0565b91506110a583610cb0565b92508282019050808211156110bd576110bc611030565b5b92915050565b5f81905092915050565b5f6110d782610b9b565b6110e181856110c3565b93506110f1818560208601610bb5565b80840191505092915050565b5f61110882856110cd565b915061111482846110cd565b9150819050939250505056fe68747470733a2f2f6372696d736f6e2d67656e65726f75732d616e742d3339352e6d7970696e6174612e636c6f75642f697066732fa264697066735822122057ede1ffce2dcd1e9fb5776c038a9240ef87c5d4c3cc9121d3f27cc40328804364736f6c6343000814003368747470733a2f2f6372696d736f6e2d67656e65726f75732d616e742d3339352e6d7970696e6174612e636c6f75642f697066732f";

type WBNCConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WBNCConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WBNC__factory extends ContractFactory {
  constructor(...args: WBNCConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _name: string,
    _symbol: string,
    _uri: string,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_name, _symbol, _uri, overrides || {});
  }
  override deploy(
    _name: string,
    _symbol: string,
    _uri: string,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_name, _symbol, _uri, overrides || {}) as Promise<
      WBNC & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): WBNC__factory {
    return super.connect(runner) as WBNC__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WBNCInterface {
    return new Interface(_abi) as WBNCInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): WBNC {
    return new Contract(address, _abi, runner) as unknown as WBNC;
  }
}
