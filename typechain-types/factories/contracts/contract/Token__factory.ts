/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { Token, TokenInterface } from "../../../contracts/contract/Token";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_uri",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "_burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "_mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_imageUri",
        type: "string",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFromTo",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "uri",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405260126003553480156200001657600080fd5b5060405162001b9338038062001b9383398181016040528101906200003c919062000377565b83600090816200004d919062000687565b5082600190816200005f919062000687565b506200007181620000d560201b60201c565b6002908162000081919062000687565b50600073f39fd6e51aad88f6f4ce6ab8827279cfffb922669050620000ca33600354600a620000b19190620008f1565b85620000be919062000942565b6200011160201b60201c565b505050505062000a32565b6060620000e76200018860201b60201c565b82604051602001620000fb929190620009cf565b6040516020818303038152906040529050919050565b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254620001629190620009f7565b9250508190555080600460008282546200017d9190620009f7565b925050819055505050565b606060405180606001604052806035815260200162001b5e60359139905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200021282620001c7565b810181811067ffffffffffffffff82111715620002345762000233620001d8565b5b80604052505050565b600062000249620001a9565b905062000257828262000207565b919050565b600067ffffffffffffffff8211156200027a5762000279620001d8565b5b6200028582620001c7565b9050602081019050919050565b60005b83811015620002b257808201518184015260208101905062000295565b60008484015250505050565b6000620002d5620002cf846200025c565b6200023d565b905082815260208101848484011115620002f457620002f3620001c2565b5b6200030184828562000292565b509392505050565b600082601f830112620003215762000320620001bd565b5b815162000333848260208601620002be565b91505092915050565b6000819050919050565b62000351816200033c565b81146200035d57600080fd5b50565b600081519050620003718162000346565b92915050565b60008060008060808587031215620003945762000393620001b3565b5b600085015167ffffffffffffffff811115620003b557620003b4620001b8565b5b620003c38782880162000309565b945050602085015167ffffffffffffffff811115620003e757620003e6620001b8565b5b620003f58782880162000309565b9350506040620004088782880162000360565b925050606085015167ffffffffffffffff8111156200042c576200042b620001b8565b5b6200043a8782880162000309565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200049957607f821691505b602082108103620004af57620004ae62000451565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005197fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620004da565b620005258683620004da565b95508019841693508086168417925050509392505050565b6000819050919050565b600062000568620005626200055c846200033c565b6200053d565b6200033c565b9050919050565b6000819050919050565b620005848362000547565b6200059c62000593826200056f565b848454620004e7565b825550505050565b600090565b620005b3620005a4565b620005c081848462000579565b505050565b5b81811015620005e857620005dc600082620005a9565b600181019050620005c6565b5050565b601f82111562000637576200060181620004b5565b6200060c84620004ca565b810160208510156200061c578190505b620006346200062b85620004ca565b830182620005c5565b50505b505050565b600082821c905092915050565b60006200065c600019846008026200063c565b1980831691505092915050565b600062000677838362000649565b9150826002028217905092915050565b620006928262000446565b67ffffffffffffffff811115620006ae57620006ad620001d8565b5b620006ba825462000480565b620006c7828285620005ec565b600060209050601f831160018114620006ff5760008415620006ea578287015190505b620006f6858262000669565b86555062000766565b601f1984166200070f86620004b5565b60005b82811015620007395784890151825560018201915060208501945060208101905062000712565b8683101562000759578489015162000755601f89168262000649565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115620007fc57808604811115620007d457620007d36200076e565b5b6001851615620007e45780820291505b8081029050620007f4856200079d565b9450620007b4565b94509492505050565b600082620008175760019050620008ea565b81620008275760009050620008ea565b81600181146200084057600281146200084b5762000881565b6001915050620008ea565b60ff84111562000860576200085f6200076e565b5b8360020a9150848211156200087a57620008796200076e565b5b50620008ea565b5060208310610133831016604e8410600b8410161715620008bb5782820a905083811115620008b557620008b46200076e565b5b620008ea565b620008ca8484846001620007aa565b92509050818404811115620008e457620008e36200076e565b5b81810290505b9392505050565b6000620008fe826200033c565b91506200090b836200033c565b92506200093a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848462000805565b905092915050565b60006200094f826200033c565b91506200095c836200033c565b92508282026200096c816200033c565b915082820484148315176200098657620009856200076e565b5b5092915050565b600081905092915050565b6000620009a58262000446565b620009b181856200098d565b9350620009c381856020860162000292565b80840191505092915050565b6000620009dd828562000998565b9150620009eb828462000998565b91508190509392505050565b600062000a04826200033c565b915062000a11836200033c565b925082820190508082111562000a2c5762000a2b6200076e565b5b92915050565b61111c8062000a426000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806355b6ed5c1161009757806395d89b411161006657806395d89b41146102be578063a9059cbb146102dc578063dd62ed3e1461030c578063eac989f81461033c576100f5565b806355b6ed5c14610212578063579952fc146102425780636161eb181461027257806370a082311461028e576100f5565b806323b872dd116100d357806323b872dd1461016657806327e235e3146101965780634cf12d26146101c65780634e6ec247146101f6576100f5565b806306fdde03146100fa578063095ea7b31461011857806318160ddd14610148575b600080fd5b61010261035a565b60405161010f9190610bb2565b60405180910390f35b610132600480360381019061012d9190610c7c565b6103e8565b60405161013f9190610cd7565b60405180910390f35b610150610475565b60405161015d9190610d01565b60405180910390f35b610180600480360381019061017b9190610d1c565b61047b565b60405161018d9190610cd7565b60405180910390f35b6101b060048036038101906101ab9190610d6f565b610650565b6040516101bd9190610d01565b60405180910390f35b6101e060048036038101906101db9190610ed1565b610668565b6040516101ed9190610bb2565b60405180910390f35b610210600480360381019061020b9190610c7c565b61069a565b005b61022c60048036038101906102279190610f1a565b61070d565b6040516102399190610d01565b60405180910390f35b61025c60048036038101906102579190610d1c565b610732565b6040516102699190610cd7565b60405180910390f35b61028c60048036038101906102879190610c7c565b6107eb565b005b6102a860048036038101906102a39190610d6f565b61085e565b6040516102b59190610d01565b60405180910390f35b6102c66108a7565b6040516102d39190610bb2565b60405180910390f35b6102f660048036038101906102f19190610c7c565b610935565b6040516103039190610cd7565b60405180910390f35b61032660048036038101906103219190610f1a565b6109ed565b6040516103339190610d01565b60405180910390f35b610344610a74565b6040516103519190610bb2565b60405180910390f35b6000805461036790610f89565b80601f016020809104026020016040519081016040528092919081815260200182805461039390610f89565b80156103e05780601f106103b5576101008083540402835291602001916103e0565b820191906000526020600020905b8154815290600101906020018083116103c357829003601f168201915b505050505081565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b60045481565b600081600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561050657600080fd5b81600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105929190610fe9565b9250508190555081600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105e89190610fe9565b9250508190555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461063e919061101d565b92505081905550600190509392505050565b60056020528060005260406000206000915090505481565b6060610672610b02565b8260405160200161068492919061108d565b6040516020818303038152906040529050919050565b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106e9919061101d565b925050819055508060046000828254610702919061101d565b925050819055505050565b6006602052816000526040600020602052806000526040600020600091509150505481565b600081600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107839190610fe9565b9250508190555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107d9919061101d565b92505081905550600190509392505050565b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461083a9190610fe9565b9250508190555080600460008282546108539190610fe9565b925050819055505050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600180546108b490610f89565b80601f01602080910402602001604051908101604052809291908181526020018280546108e090610f89565b801561092d5780601f106109025761010080835404028352916020019161092d565b820191906000526020600020905b81548152906001019060200180831161091057829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109869190610fe9565b9250508190555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109dc919061101d565b925050819055506001905092915050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60028054610a8190610f89565b80601f0160208091040260200160405190810160405280929190818152602001828054610aad90610f89565b8015610afa5780601f10610acf57610100808354040283529160200191610afa565b820191906000526020600020905b815481529060010190602001808311610add57829003601f168201915b505050505081565b60606040518060600160405280603581526020016110b260359139905090565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b5c578082015181840152602081019050610b41565b60008484015250505050565b6000601f19601f8301169050919050565b6000610b8482610b22565b610b8e8185610b2d565b9350610b9e818560208601610b3e565b610ba781610b68565b840191505092915050565b60006020820190508181036000830152610bcc8184610b79565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c1382610be8565b9050919050565b610c2381610c08565b8114610c2e57600080fd5b50565b600081359050610c4081610c1a565b92915050565b6000819050919050565b610c5981610c46565b8114610c6457600080fd5b50565b600081359050610c7681610c50565b92915050565b60008060408385031215610c9357610c92610bde565b5b6000610ca185828601610c31565b9250506020610cb285828601610c67565b9150509250929050565b60008115159050919050565b610cd181610cbc565b82525050565b6000602082019050610cec6000830184610cc8565b92915050565b610cfb81610c46565b82525050565b6000602082019050610d166000830184610cf2565b92915050565b600080600060608486031215610d3557610d34610bde565b5b6000610d4386828701610c31565b9350506020610d5486828701610c31565b9250506040610d6586828701610c67565b9150509250925092565b600060208284031215610d8557610d84610bde565b5b6000610d9384828501610c31565b91505092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610dde82610b68565b810181811067ffffffffffffffff82111715610dfd57610dfc610da6565b5b80604052505050565b6000610e10610bd4565b9050610e1c8282610dd5565b919050565b600067ffffffffffffffff821115610e3c57610e3b610da6565b5b610e4582610b68565b9050602081019050919050565b82818337600083830152505050565b6000610e74610e6f84610e21565b610e06565b905082815260208101848484011115610e9057610e8f610da1565b5b610e9b848285610e52565b509392505050565b600082601f830112610eb857610eb7610d9c565b5b8135610ec8848260208601610e61565b91505092915050565b600060208284031215610ee757610ee6610bde565b5b600082013567ffffffffffffffff811115610f0557610f04610be3565b5b610f1184828501610ea3565b91505092915050565b60008060408385031215610f3157610f30610bde565b5b6000610f3f85828601610c31565b9250506020610f5085828601610c31565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610fa157607f821691505b602082108103610fb457610fb3610f5a565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ff482610c46565b9150610fff83610c46565b925082820390508181111561101757611016610fba565b5b92915050565b600061102882610c46565b915061103383610c46565b925082820190508082111561104b5761104a610fba565b5b92915050565b600081905092915050565b600061106782610b22565b6110718185611051565b9350611081818560208601610b3e565b80840191505092915050565b6000611099828561105c565b91506110a5828461105c565b9150819050939250505056fe68747470733a2f2f6372696d736f6e2d67656e65726f75732d616e742d3339352e6d7970696e6174612e636c6f75642f697066732fa2646970667358221220237c1d42b1a387798d9f0c00e6a56f98bc654377704af3055e8aacdd3ef32e3164736f6c6343000814003368747470733a2f2f6372696d736f6e2d67656e65726f75732d616e742d3339352e6d7970696e6174612e636c6f75642f697066732f";

type TokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Token__factory extends ContractFactory {
  constructor(...args: TokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _name: string,
    _symbol: string,
    _amount: BigNumberish,
    _uri: string,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _name,
      _symbol,
      _amount,
      _uri,
      overrides || {}
    );
  }
  override deploy(
    _name: string,
    _symbol: string,
    _amount: BigNumberish,
    _uri: string,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _name,
      _symbol,
      _amount,
      _uri,
      overrides || {}
    ) as Promise<
      Token & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Token__factory {
    return super.connect(runner) as Token__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenInterface {
    return new Interface(_abi) as TokenInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Token {
    return new Contract(address, _abi, runner) as unknown as Token;
  }
}
