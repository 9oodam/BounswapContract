/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  InitialProxy,
  InitialProxyInterface,
} from "../../../contracts/contract/InitialProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factoryAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_swapAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_wbncAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "initialPlay",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "initialPlayPayable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pairAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "outputAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxToken",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "inputToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "outputToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
    ],
    name: "swapBNCForExactTokens",
    outputs: [
      {
        internalType: "bool",
        name: "result",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pairAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "inputAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minToken",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "inputToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "outputToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
    ],
    name: "swapExactBNCForTokens",
    outputs: [
      {
        internalType: "bool",
        name: "result",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526001600260146101000a81548160ff0219169083151502179055506001600260156101000a81548160ff0219169083151502179055503480156200004757600080fd5b5060405162000f1d38038062000f1d83398181016040528101906200006d9190620001a2565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620001fe565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200016a826200013d565b9050919050565b6200017c816200015d565b81146200018857600080fd5b50565b6000815190506200019c8162000171565b92915050565b600080600060608486031215620001be57620001bd62000138565b5b6000620001ce868287016200018b565b9350506020620001e1868287016200018b565b9250506040620001f4868287016200018b565b9150509250925092565b610d0f806200020e6000396000f3fe60806040526004361061003f5760003560e01c806345056c82146100445780636462ec9e146100745780637fb708d5146100a4578063a9c1583b146100d4575b600080fd5b61005e600480360381019061005991906107d4565b610111565b60405161006b9190610838565b60405180910390f35b61008e600480360381019061008991906108e7565b610237565b60405161009b9190610838565b60405180910390f35b6100be60048036038101906100b991906108e7565b61034a565b6040516100cb9190610838565b60405180910390f35b3480156100e057600080fd5b506100fb60048036038101906100f691906107d4565b61046e565b6040516101089190610838565b60405180910390f35b600080600090505b825181101561022d5760011515600260159054906101000a900460ff16151514610178576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016f906109d1565b60405180910390fd5b60003073ffffffffffffffffffffffffffffffffffffffff168483815181106101a4576101a36109f1565b5b60200260200101516040516101b99190610a91565b6000604051808303816000865af19150503d80600081146101f6576040519150601f19603f3d011682016040523d82523d6000602084013e6101fb565b606091505b5050905080600260156101000a81548160ff02191690831515021790555050808061022590610ad7565b915050610119565b5060019050919050565b60008060405180604001604052808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c4898a9888a8a8a86896040518763ffffffff1660e01b815260040161030d959493929190610be8565b6000604051808303818588803b15801561032657600080fd5b505af115801561033a573d6000803e3d6000fd5b5050505050509695505050505050565b60008060405180604001604052808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d5083e64878a8a85886040518663ffffffff1660e01b815260040161041e9493929190610c3b565b60206040518083038185885af115801561043c573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906104619190610cac565b9150509695505050505050565b600080600090505b825181101561058a5760011515600260149054906101000a900460ff161515146104d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cc906109d1565b60405180910390fd5b60003073ffffffffffffffffffffffffffffffffffffffff16848381518110610501576105006109f1565b5b60200260200101516040516105169190610a91565b6000604051808303816000865af19150503d8060008114610553576040519150601f19603f3d011682016040523d82523d6000602084013e610558565b606091505b5050905080600260146101000a81548160ff02191690831515021790555050808061058290610ad7565b915050610476565b5060019050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6105f6826105ad565b810181811067ffffffffffffffff82111715610615576106146105be565b5b80604052505050565b6000610628610594565b905061063482826105ed565b919050565b600067ffffffffffffffff821115610654576106536105be565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff82111561068a576106896105be565b5b610693826105ad565b9050602081019050919050565b82818337600083830152505050565b60006106c26106bd8461066f565b61061e565b9050828152602081018484840111156106de576106dd61066a565b5b6106e98482856106a0565b509392505050565b600082601f830112610706576107056105a8565b5b81356107168482602086016106af565b91505092915050565b600061073261072d84610639565b61061e565b9050808382526020820190506020840283018581111561075557610754610665565b5b835b8181101561079c57803567ffffffffffffffff81111561077a576107796105a8565b5b80860161078789826106f1565b85526020850194505050602081019050610757565b5050509392505050565b600082601f8301126107bb576107ba6105a8565b5b81356107cb84826020860161071f565b91505092915050565b6000602082840312156107ea576107e961059e565b5b600082013567ffffffffffffffff811115610808576108076105a3565b5b610814848285016107a6565b91505092915050565b60008115159050919050565b6108328161081d565b82525050565b600060208201905061084d6000830184610829565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061087e82610853565b9050919050565b61088e81610873565b811461089957600080fd5b50565b6000813590506108ab81610885565b92915050565b6000819050919050565b6108c4816108b1565b81146108cf57600080fd5b50565b6000813590506108e1816108bb565b92915050565b60008060008060008060c087890312156109045761090361059e565b5b600061091289828a0161089c565b965050602061092389828a016108d2565b955050604061093489828a016108d2565b945050606061094589828a0161089c565b935050608061095689828a0161089c565b92505060a061096789828a0161089c565b9150509295509295509295565b600082825260208201905092915050565b7f46756e6374696f6e206661696c65640000000000000000000000000000000000600082015250565b60006109bb600f83610974565b91506109c682610985565b602082019050919050565b600060208201905081810360008301526109ea816109ae565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600081905092915050565b60005b83811015610a54578082015181840152602081019050610a39565b60008484015250505050565b6000610a6b82610a20565b610a758185610a2b565b9350610a85818560208601610a36565b80840191505092915050565b6000610a9d8284610a60565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ae2826108b1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610b1457610b13610aa8565b5b600182019050919050565b610b2881610873565b82525050565b610b37816108b1565b82525050565b600060029050919050565b600081905092915050565b6000819050919050565b610b6681610873565b82525050565b6000610b788383610b5d565b60208301905092915050565b6000602082019050919050565b610b9a81610b3d565b610ba48184610b48565b9250610baf82610b53565b8060005b83811015610be0578151610bc78782610b6c565b9650610bd283610b84565b925050600181019050610bb3565b505050505050565b600060c082019050610bfd6000830188610b1f565b610c0a6020830187610b2e565b610c176040830186610b2e565b610c246060830185610b91565b610c3160a0830184610b1f565b9695505050505050565b600060a082019050610c506000830187610b1f565b610c5d6020830186610b2e565b610c6a6040830185610b91565b610c776080830184610b1f565b95945050505050565b610c898161081d565b8114610c9457600080fd5b50565b600081519050610ca681610c80565b92915050565b600060208284031215610cc257610cc161059e565b5b6000610cd084828501610c97565b9150509291505056fea264697066735822122007af3adcc8b2e2d58174272ae80344cdcb58f7dae2aa3a4664ec9a411907ff2364736f6c63430008140033";

type InitialProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: InitialProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class InitialProxy__factory extends ContractFactory {
  constructor(...args: InitialProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _factoryAddress: AddressLike,
    _swapAddress: AddressLike,
    _wbncAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _factoryAddress,
      _swapAddress,
      _wbncAddress,
      overrides || {}
    );
  }
  override deploy(
    _factoryAddress: AddressLike,
    _swapAddress: AddressLike,
    _wbncAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _factoryAddress,
      _swapAddress,
      _wbncAddress,
      overrides || {}
    ) as Promise<
      InitialProxy & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): InitialProxy__factory {
    return super.connect(runner) as InitialProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): InitialProxyInterface {
    return new Interface(_abi) as InitialProxyInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): InitialProxy {
    return new Contract(address, _abi, runner) as unknown as InitialProxy;
  }
}
