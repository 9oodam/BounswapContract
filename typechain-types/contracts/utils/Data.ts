/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Data {
  export type PoolDetailStruct = {
    pairAddress: AddressLike;
    token0Uri: string;
    token1Uri: string;
    token0Symbol: string;
    token1Symbol: string;
    tvl: BigNumberish;
  };

  export type PoolDetailStructOutput = [
    pairAddress: string,
    token0Uri: string,
    token1Uri: string,
    token0Symbol: string,
    token1Symbol: string,
    tvl: bigint
  ] & {
    pairAddress: string;
    token0Uri: string;
    token1Uri: string;
    token0Symbol: string;
    token1Symbol: string;
    tvl: bigint;
  };

  export type TokenDetailStruct = {
    tokenAddress: AddressLike;
    name: string;
    symbol: string;
    uri: string;
    tvl: BigNumberish;
  };

  export type TokenDetailStructOutput = [
    tokenAddress: string,
    name: string,
    symbol: string,
    uri: string,
    tvl: bigint
  ] & {
    tokenAddress: string;
    name: string;
    symbol: string;
    uri: string;
    tvl: bigint;
  };

  export type UnclaimedFeeDataStruct = {
    token0FeeAmount: BigNumberish;
    token1FeeAmount: BigNumberish;
  };

  export type UnclaimedFeeDataStructOutput = [
    token0FeeAmount: bigint,
    token1FeeAmount: bigint
  ] & { token0FeeAmount: bigint; token1FeeAmount: bigint };

  export type MyPoolDetailStruct = {
    pooldetail: Data.PoolDetailStruct;
    token0Amount: BigNumberish;
    token1Amount: BigNumberish;
  };

  export type MyPoolDetailStructOutput = [
    pooldetail: Data.PoolDetailStructOutput,
    token0Amount: bigint,
    token1Amount: bigint
  ] & {
    pooldetail: Data.PoolDetailStructOutput;
    token0Amount: bigint;
    token1Amount: bigint;
  };
}

export interface DataInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addPair"
      | "addToken"
      | "addValidatorArr"
      | "addValidatorPoolArr"
      | "allPairs"
      | "allPairsLength"
      | "allTokens"
      | "blockNumbers"
      | "getAllPairAddress"
      | "getAllPools"
      | "getAllTokenAddress"
      | "getAllTokens"
      | "getBlockNumber"
      | "getEachPool"
      | "getEachToken"
      | "getUnclaimedFee(address,address)"
      | "getUnclaimedFee(address)"
      | "getUserPoolDetail"
      | "getUserPools"
      | "getValidatorArr"
      | "getValidatorPoolArr"
      | "setUnclaimedFee"
      | "subValidatorArr"
      | "subValidatorPoolArr"
      | "userUnclaimedFee"
      | "validatorArr"
      | "validatorPoolArr"
      | "validatorPoolArrLength"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addPair",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addValidatorArr",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addValidatorPoolArr",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allPairs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allPairsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "blockNumbers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPairAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockNumber",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEachPool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEachToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnclaimedFee(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnclaimedFee(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPoolDetail",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorArr",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorPoolArr",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnclaimedFee",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subValidatorArr",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subValidatorPoolArr",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userUnclaimedFee",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorArr",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorPoolArr",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorPoolArrLength",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addValidatorArr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addValidatorPoolArr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allPairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allPairsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blockNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPairAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEachPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEachToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnclaimedFee(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnclaimedFee(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPoolDetail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorArr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorPoolArr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnclaimedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subValidatorArr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subValidatorPoolArr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userUnclaimedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorArr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorPoolArr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorPoolArrLength",
    data: BytesLike
  ): Result;
}

export interface Data extends BaseContract {
  connect(runner?: ContractRunner | null): Data;
  waitForDeployment(): Promise<this>;

  interface: DataInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addPair: TypedContractMethod<
    [pairAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  addToken: TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  addValidatorArr: TypedContractMethod<
    [pair: AddressLike, validator: AddressLike],
    [void],
    "nonpayable"
  >;

  addValidatorPoolArr: TypedContractMethod<
    [to: AddressLike, pool: AddressLike],
    [void],
    "nonpayable"
  >;

  allPairs: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  allPairsLength: TypedContractMethod<[], [bigint], "view">;

  allTokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  blockNumbers: TypedContractMethod<
    [blockTimeStamp: BigNumberish],
    [bigint],
    "view"
  >;

  getAllPairAddress: TypedContractMethod<[], [string[]], "view">;

  getAllPools: TypedContractMethod<[], [Data.PoolDetailStructOutput[]], "view">;

  getAllTokenAddress: TypedContractMethod<[], [string[]], "view">;

  getAllTokens: TypedContractMethod<
    [],
    [Data.TokenDetailStructOutput[]],
    "view"
  >;

  getBlockNumber: TypedContractMethod<
    [timeStampNow: BigNumberish, timeStampBefore: BigNumberish],
    [bigint[]],
    "view"
  >;

  getEachPool: TypedContractMethod<
    [pairAddress: AddressLike],
    [Data.PoolDetailStructOutput],
    "view"
  >;

  getEachToken: TypedContractMethod<
    [tokenAddress: AddressLike],
    [Data.TokenDetailStructOutput],
    "view"
  >;

  "getUnclaimedFee(address,address)": TypedContractMethod<
    [validator: AddressLike, pairAddress: AddressLike],
    [[bigint, bigint]],
    "view"
  >;

  "getUnclaimedFee(address)": TypedContractMethod<
    [pairAddress: AddressLike],
    [Data.UnclaimedFeeDataStructOutput],
    "view"
  >;

  getUserPoolDetail: TypedContractMethod<
    [pairAddress: AddressLike],
    [Data.MyPoolDetailStructOutput],
    "view"
  >;

  getUserPools: TypedContractMethod<
    [],
    [Data.PoolDetailStructOutput[]],
    "view"
  >;

  getValidatorArr: TypedContractMethod<[pair: AddressLike], [string[]], "view">;

  getValidatorPoolArr: TypedContractMethod<
    [to: AddressLike],
    [string[]],
    "view"
  >;

  setUnclaimedFee: TypedContractMethod<
    [
      validator: AddressLike,
      pairAddress: AddressLike,
      amount0: BigNumberish,
      amount1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  subValidatorArr: TypedContractMethod<
    [pair: AddressLike, validator: AddressLike],
    [void],
    "nonpayable"
  >;

  subValidatorPoolArr: TypedContractMethod<
    [to: AddressLike, pool: AddressLike],
    [void],
    "nonpayable"
  >;

  userUnclaimedFee: TypedContractMethod<
    [validator: AddressLike, pairAddress: AddressLike],
    [[bigint, bigint] & { token0FeeAmount: bigint; token1FeeAmount: bigint }],
    "view"
  >;

  validatorArr: TypedContractMethod<
    [pairAddress: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  validatorPoolArr: TypedContractMethod<
    [validator: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  validatorPoolArrLength: TypedContractMethod<
    [validator: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addPair"
  ): TypedContractMethod<[pairAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addValidatorArr"
  ): TypedContractMethod<
    [pair: AddressLike, validator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addValidatorPoolArr"
  ): TypedContractMethod<
    [to: AddressLike, pool: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allPairs"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "allPairsLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "blockNumbers"
  ): TypedContractMethod<[blockTimeStamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllPairAddress"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAllPools"
  ): TypedContractMethod<[], [Data.PoolDetailStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getAllTokenAddress"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAllTokens"
  ): TypedContractMethod<[], [Data.TokenDetailStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getBlockNumber"
  ): TypedContractMethod<
    [timeStampNow: BigNumberish, timeStampBefore: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEachPool"
  ): TypedContractMethod<
    [pairAddress: AddressLike],
    [Data.PoolDetailStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEachToken"
  ): TypedContractMethod<
    [tokenAddress: AddressLike],
    [Data.TokenDetailStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUnclaimedFee(address,address)"
  ): TypedContractMethod<
    [validator: AddressLike, pairAddress: AddressLike],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUnclaimedFee(address)"
  ): TypedContractMethod<
    [pairAddress: AddressLike],
    [Data.UnclaimedFeeDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserPoolDetail"
  ): TypedContractMethod<
    [pairAddress: AddressLike],
    [Data.MyPoolDetailStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserPools"
  ): TypedContractMethod<[], [Data.PoolDetailStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getValidatorArr"
  ): TypedContractMethod<[pair: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getValidatorPoolArr"
  ): TypedContractMethod<[to: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "setUnclaimedFee"
  ): TypedContractMethod<
    [
      validator: AddressLike,
      pairAddress: AddressLike,
      amount0: BigNumberish,
      amount1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "subValidatorArr"
  ): TypedContractMethod<
    [pair: AddressLike, validator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "subValidatorPoolArr"
  ): TypedContractMethod<
    [to: AddressLike, pool: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userUnclaimedFee"
  ): TypedContractMethod<
    [validator: AddressLike, pairAddress: AddressLike],
    [[bigint, bigint] & { token0FeeAmount: bigint; token1FeeAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "validatorArr"
  ): TypedContractMethod<
    [pairAddress: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "validatorPoolArr"
  ): TypedContractMethod<
    [validator: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "validatorPoolArrLength"
  ): TypedContractMethod<[validator: AddressLike], [bigint], "view">;

  filters: {};
}
