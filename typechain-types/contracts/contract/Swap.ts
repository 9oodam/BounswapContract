/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SwapInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bNCForExactTokens"
      | "exactBNCForTokens"
      | "exactTokensForBNC"
      | "exactTokensForTokens"
      | "getMaxToken"
      | "getMinToken"
      | "tokensForExactBNC"
      | "tokensForExactTokens"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;

  encodeFunctionData(
    functionFragment: "bNCForExactTokens",
    values: [AddressLike, BigNumberish, [AddressLike, AddressLike], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exactBNCForTokens",
    values: [AddressLike, BigNumberish, [AddressLike, AddressLike], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exactTokensForBNC",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      [AddressLike, AddressLike],
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exactTokensForTokens",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      [AddressLike, AddressLike],
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxToken",
    values: [AddressLike, BigNumberish, [AddressLike, AddressLike]]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinToken",
    values: [AddressLike, BigNumberish, [AddressLike, AddressLike]]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensForExactBNC",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      [AddressLike, AddressLike],
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensForExactTokens",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      [AddressLike, AddressLike],
      AddressLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "bNCForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactBNCForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactTokensForBNC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensForExactBNC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensForExactTokens",
    data: BytesLike
  ): Result;
}

export namespace SwapEvent {
  export type InputTuple = [
    user: AddressLike,
    pair: AddressLike,
    amount0In: BigNumberish,
    amount1In: BigNumberish,
    amount0Out: BigNumberish,
    amount1Out: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    pair: string,
    amount0In: bigint,
    amount1In: bigint,
    amount0Out: bigint,
    amount1Out: bigint
  ];
  export interface OutputObject {
    user: string;
    pair: string;
    amount0In: bigint;
    amount1In: bigint;
    amount0Out: bigint;
    amount1Out: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Swap extends BaseContract {
  connect(runner?: ContractRunner | null): Swap;
  waitForDeployment(): Promise<this>;

  interface: SwapInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bNCForExactTokens: TypedContractMethod<
    [
      pairAddress: AddressLike,
      outputAmount: BigNumberish,
      path: [AddressLike, AddressLike],
      to: AddressLike
    ],
    [boolean],
    "payable"
  >;

  exactBNCForTokens: TypedContractMethod<
    [
      pairAddress: AddressLike,
      minToken: BigNumberish,
      path: [AddressLike, AddressLike],
      to: AddressLike
    ],
    [void],
    "payable"
  >;

  exactTokensForBNC: TypedContractMethod<
    [
      pairAddress: AddressLike,
      inputAmount: BigNumberish,
      minToken: BigNumberish,
      path: [AddressLike, AddressLike],
      to: AddressLike
    ],
    [boolean],
    "payable"
  >;

  exactTokensForTokens: TypedContractMethod<
    [
      pairAddress: AddressLike,
      inputAmount: BigNumberish,
      minToken: BigNumberish,
      path: [AddressLike, AddressLike],
      to: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;

  getMaxToken: TypedContractMethod<
    [
      pairAddress: AddressLike,
      outputAmount: BigNumberish,
      path: [AddressLike, AddressLike]
    ],
    [bigint],
    "view"
  >;

  getMinToken: TypedContractMethod<
    [
      pairAddress: AddressLike,
      inputAmount: BigNumberish,
      path: [AddressLike, AddressLike]
    ],
    [bigint],
    "view"
  >;

  tokensForExactBNC: TypedContractMethod<
    [
      pairAddress: AddressLike,
      outputAmount: BigNumberish,
      maxToken: BigNumberish,
      path: [AddressLike, AddressLike],
      to: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;

  tokensForExactTokens: TypedContractMethod<
    [
      pairAddress: AddressLike,
      outputAmount: BigNumberish,
      maxToken: BigNumberish,
      path: [AddressLike, AddressLike],
      to: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bNCForExactTokens"
  ): TypedContractMethod<
    [
      pairAddress: AddressLike,
      outputAmount: BigNumberish,
      path: [AddressLike, AddressLike],
      to: AddressLike
    ],
    [boolean],
    "payable"
  >;
  getFunction(
    nameOrSignature: "exactBNCForTokens"
  ): TypedContractMethod<
    [
      pairAddress: AddressLike,
      minToken: BigNumberish,
      path: [AddressLike, AddressLike],
      to: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "exactTokensForBNC"
  ): TypedContractMethod<
    [
      pairAddress: AddressLike,
      inputAmount: BigNumberish,
      minToken: BigNumberish,
      path: [AddressLike, AddressLike],
      to: AddressLike
    ],
    [boolean],
    "payable"
  >;
  getFunction(
    nameOrSignature: "exactTokensForTokens"
  ): TypedContractMethod<
    [
      pairAddress: AddressLike,
      inputAmount: BigNumberish,
      minToken: BigNumberish,
      path: [AddressLike, AddressLike],
      to: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getMaxToken"
  ): TypedContractMethod<
    [
      pairAddress: AddressLike,
      outputAmount: BigNumberish,
      path: [AddressLike, AddressLike]
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMinToken"
  ): TypedContractMethod<
    [
      pairAddress: AddressLike,
      inputAmount: BigNumberish,
      path: [AddressLike, AddressLike]
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokensForExactBNC"
  ): TypedContractMethod<
    [
      pairAddress: AddressLike,
      outputAmount: BigNumberish,
      maxToken: BigNumberish,
      path: [AddressLike, AddressLike],
      to: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokensForExactTokens"
  ): TypedContractMethod<
    [
      pairAddress: AddressLike,
      outputAmount: BigNumberish,
      maxToken: BigNumberish,
      path: [AddressLike, AddressLike],
      to: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "Swap"
  ): TypedContractEvent<
    SwapEvent.InputTuple,
    SwapEvent.OutputTuple,
    SwapEvent.OutputObject
  >;

  filters: {
    "Swap(address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;
    Swap: TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;
  };
}
